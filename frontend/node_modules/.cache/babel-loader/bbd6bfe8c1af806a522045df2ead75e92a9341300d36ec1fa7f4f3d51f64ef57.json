{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\unili\\\\Desktop\\\\Task 4\\\\frontend\\\\src\\\\components\\\\UsersDetails.js\",\n  _s = $RefreshSig$();\nimport React, { useMemo } from \"react\";\nimport { usePagination, useRowSelect, useTable } from \"react-table\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst UsersDetails = ({\n  users\n}) => {\n  _s();\n  const COLUMNS = [{\n    Header: \"Check\",\n    accessor: \"check\",\n    Cell: ({\n      row\n    }) => /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"checkbox\",\n      checked: row.original.check,\n      readOnly: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 9\n    }, this)\n  }, {\n    Header: \"Name\",\n    accessor: \"fullname\"\n  }, {\n    Header: \"Position\",\n    accessor: \"position\"\n  }, {\n    Header: \"e-Mail\",\n    accessor: \"email\"\n  }, {\n    Header: \"Last login\",\n    accessor: \"lastlogin\"\n  }, {\n    Header: \"Status\",\n    accessor: \"status\"\n  }];\n  const columns = useMemo(() => COLUMNS, []);\n  const data = useMemo(() => users, []);\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    page\n  } = useTable({\n    columns,\n    data\n  }, usePagination, useRowSelect, hooks => {\n    hooks.visibleColumns.push(columns => [{\n      id: \"anyThing\",\n      Header: ({\n        toggleRowSelected,\n        isAllPageRowsSelected,\n        page\n      }) => {\n        const modifiedOnChange = event => {\n          page.forEach(row => {\n            !row.original.disabled && toggleRowSelected(row.id, event.currentTarget.checked);\n          });\n        };\n        let selectableRowsInCurrentPage = 0;\n        let selectedRowsInCurrentPage = 0;\n        page.forEach(row => {\n          row.isSelected && selectedRowsInCurrentPage++;\n          !row.original.disabled && selectableRowsInCurrentPage++;\n        });\n        const disabled = selectableRowsInCurrentPage === 0;\n        const checked = (isAllPageRowsSelected || selectableRowsInCurrentPage === selectedRowsInCurrentPage) && !disabled;\n      }\n    }, ...columns]);\n    console.log(selectedRowsInCurrentPage);\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"table\", {\n      ...getTableProps(),\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: headerGroups.map(headerGroup => /*#__PURE__*/_jsxDEV(\"tr\", {\n          ...headerGroup.getHeaderGroupProps(),\n          children: headerGroup.headers.map(column => /*#__PURE__*/_jsxDEV(\"th\", {\n            ...column.getHeaderProps(),\n            children: column.render(\"Header\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        ...getTableBodyProps(),\n        children: page.map((row, i) => {\n          prepareRow(row);\n          return /*#__PURE__*/_jsxDEV(\"tr\", {\n            ...row.getRowProps(),\n            children: row.cells.map(cell => /*#__PURE__*/_jsxDEV(\"td\", {\n              ...cell.getCellProps(),\n              children: cell.render(\"Cell\")\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(UsersDetails, \"RyIsyLzssUIBCO60GpxpWfzLKE0=\", false, function () {\n  return [useTable];\n});\n_c = UsersDetails;\nexport default UsersDetails;\nvar _c;\n$RefreshReg$(_c, \"UsersDetails\");","map":{"version":3,"names":["React","useMemo","usePagination","useRowSelect","useTable","jsxDEV","_jsxDEV","Fragment","_Fragment","UsersDetails","users","_s","COLUMNS","Header","accessor","Cell","row","type","checked","original","check","readOnly","fileName","_jsxFileName","lineNumber","columnNumber","columns","data","getTableProps","getTableBodyProps","headerGroups","prepareRow","page","hooks","visibleColumns","push","id","toggleRowSelected","isAllPageRowsSelected","modifiedOnChange","event","forEach","disabled","currentTarget","selectableRowsInCurrentPage","selectedRowsInCurrentPage","isSelected","console","log","children","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","i","getRowProps","cells","cell","getCellProps","_c","$RefreshReg$"],"sources":["C:/Users/unili/Desktop/Task 4/frontend/src/components/UsersDetails.js"],"sourcesContent":["import React, { useMemo } from \"react\";\r\nimport { usePagination, useRowSelect, useTable } from \"react-table\";\r\n\r\nconst UsersDetails = ({ users }) => {\r\n\r\n  const COLUMNS = [\r\n    {\r\n      Header: \"Check\",\r\n      accessor: \"check\",\r\n      Cell: ({ row }) => (\r\n        <input type=\"checkbox\" checked={row.original.check} readOnly />\r\n      ),\r\n    },\r\n    {\r\n      Header: \"Name\",\r\n      accessor: \"fullname\",\r\n    },\r\n    {\r\n      Header: \"Position\",\r\n      accessor: \"position\",\r\n    },\r\n    {\r\n      Header: \"e-Mail\",\r\n      accessor: \"email\",\r\n    },\r\n    {\r\n      Header: \"Last login\",\r\n      accessor: \"lastlogin\",\r\n    },\r\n    {\r\n      Header: \"Status\",\r\n      accessor: \"status\",\r\n    },\r\n  ];\r\n\r\n  const columns = useMemo(() => COLUMNS, []);\r\n  const data = useMemo(() => users, []);\r\n\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    prepareRow,\r\n    page,\r\n  } = useTable(\r\n    {\r\n      columns,\r\n      data,\r\n    },\r\n    usePagination,\r\n    useRowSelect,\r\n    (hooks) => {\r\n      hooks.visibleColumns.push((columns) => [\r\n        {\r\n          id: \"anyThing\",\r\n          Header: ({ toggleRowSelected, isAllPageRowsSelected, page }) => {\r\n            const modifiedOnChange = (event) => {\r\n              page.forEach((row) => {\r\n                !row.original.disabled &&\r\n                  toggleRowSelected(row.id, event.currentTarget.checked);\r\n              });\r\n            };\r\n\r\n            let selectableRowsInCurrentPage = 0;\r\n            let selectedRowsInCurrentPage = 0;\r\n            page.forEach((row) => {\r\n              row.isSelected && selectedRowsInCurrentPage++;\r\n              !row.original.disabled && selectableRowsInCurrentPage++;\r\n            });\r\n\r\n            const disabled = selectableRowsInCurrentPage === 0;\r\n            const checked =\r\n              (isAllPageRowsSelected ||\r\n                selectableRowsInCurrentPage === selectedRowsInCurrentPage) &&\r\n              !disabled;\r\n          },\r\n        },\r\n        ...columns,\r\n      ]);\r\n      console.log(selectedRowsInCurrentPage);\r\n    }\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <table {...getTableProps()}>\r\n        <thead>\r\n          {headerGroups.map((headerGroup) => (\r\n            <tr {...headerGroup.getHeaderGroupProps()}>\r\n              {headerGroup.headers.map((column) => (\r\n                <th {...column.getHeaderProps()}>{column.render(\"Header\")}</th>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </thead>\r\n        <tbody {...getTableBodyProps()}>\r\n          {page.map((row, i) => {\r\n            prepareRow(row);\r\n            return (\r\n              <tr {...row.getRowProps()}>\r\n                {row.cells.map((cell) => (\r\n                  <td {...cell.getCellProps()}>{cell.render(\"Cell\")}</td>\r\n                ))}\r\n              </tr>\r\n            );\r\n          })}\r\n        </tbody>\r\n      </table>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default UsersDetails;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}