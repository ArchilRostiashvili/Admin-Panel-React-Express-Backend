{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\unili\\\\Desktop\\\\Task 4\\\\frontend\\\\src\\\\components\\\\UsersDetails.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useMemo } from \"react\";\nimport { useRowSelect, useTable } from \"react-table\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst IndeterminateCheckbox = /*#__PURE__*/_s( /*#__PURE__*/React.forwardRef(_c = _s(({\n  indeterminate,\n  ...rest\n}, ref) => {\n  _s();\n  const defaultRef = React.useRef();\n  const resolvedRef = ref || defaultRef;\n  React.useEffect(() => {\n    resolvedRef.current.indeterminate = indeterminate;\n  }, [resolvedRef, indeterminate]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"checkbox\",\n      ref: resolvedRef,\n      ...rest\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}, \"ouw4KVvDKeit07oEcYWUcp3TdOA=\")), \"ouw4KVvDKeit07oEcYWUcp3TdOA=\");\n_c2 = IndeterminateCheckbox;\nconst UsersDetails = ({\n  users\n}) => {\n  _s2();\n  const COLUMNS = [{\n    Header: \"Check\",\n    accessor: \"check\",\n    Cell: ({\n      row\n    }) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(IndeterminateCheckbox, {\n        ...row.getToggleRowSelectedProps(),\n        disabled: row.original.disabled\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }, this)\n  }, {\n    Header: \"Name\",\n    accessor: \"fullname\"\n  }, {\n    Header: \"Position\",\n    accessor: \"position\"\n  }, {\n    Header: \"e-Mail\",\n    accessor: \"email\"\n  }, {\n    Header: \"Last login\",\n    accessor: \"lastlogin\"\n  }, {\n    Header: \"Status\",\n    accessor: \"status\"\n  }];\n  const columns = useMemo(() => COLUMNS, []);\n  const data = useMemo(() => users, []);\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    selectedRowIds,\n    selectedFlatRows\n  } = useTable({\n    columns,\n    data\n  }, useRowSelect, hooks => {\n    hooks.visibleColumns.push(columns => [{\n      id: \"anyThing\",\n      Header: ({\n        toggleRowSelected,\n        isAllPageRowsSelected,\n        page\n      }) => {\n        const modifiedOnChange = event => {\n          page.forEach(row => {\n            !row.original.disabled && toggleRowSelected(row.id, event.currentTarget.checked);\n          });\n        };\n        let selectableRowsInCurrentPage = 0;\n        let selectedRowsInCurrentPage = 0;\n        page.forEach(row => {\n          row.isSelected && selectedRowsInCurrentPage++;\n          !row.original.disabled && selectableRowsInCurrentPage++;\n        });\n        const disabled = selectableRowsInCurrentPage === 0;\n        const checked = (isAllPageRowsSelected || selectableRowsInCurrentPage === selectedRowsInCurrentPage) && !disabled;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(IndeterminateCheckbox, {\n            onChange: modifiedOnChange,\n            checked: checked,\n            disabled: disabled\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 15\n        }, this);\n      },\n      Cell: ({\n        row\n      }) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(IndeterminateCheckbox, {\n          ...row.getToggleRowSelectedProps(),\n          disabled: row.original.disabled\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 13\n      }, this)\n    }, ...columns]);\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"table\", {\n      ...getTableProps(),\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: headerGroups.map(headerGroup => /*#__PURE__*/_jsxDEV(\"tr\", {\n          ...headerGroup.getHeaderGroupProps(),\n          children: headerGroup.headers.map(column => /*#__PURE__*/_jsxDEV(\"th\", {\n            ...column.getHeaderProps(),\n            children: column.render(\"Header\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        ...getTableBodyProps(),\n        children: selectedFlatRows.map(row => {\n          prepareRow(row);\n          return /*#__PURE__*/_jsxDEV(\"tr\", {\n            ...row.getRowProps(),\n            children: row.cells.map(cell => /*#__PURE__*/_jsxDEV(\"td\", {\n              ...cell.getCellProps(),\n              children: cell.render(\"Cell\")\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 138,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n      children: /*#__PURE__*/_jsxDEV(\"code\", {\n        children: JSON.stringify({\n          selectedRowIds: selectedRowIds,\n          \"selectedFlatRows[].original\": selectedFlatRows.map(d => d.original)\n        }, null, 2)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s2(UsersDetails, \"TfAQbSaLshTVBy07WJXTK8d0IgM=\", false, function () {\n  return [useTable];\n});\n_c3 = UsersDetails;\nexport default UsersDetails;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"IndeterminateCheckbox$React.forwardRef\");\n$RefreshReg$(_c2, \"IndeterminateCheckbox\");\n$RefreshReg$(_c3, \"UsersDetails\");","map":{"version":3,"names":["React","useMemo","useRowSelect","useTable","jsxDEV","_jsxDEV","Fragment","_Fragment","IndeterminateCheckbox","_s","forwardRef","_c","indeterminate","rest","ref","defaultRef","useRef","resolvedRef","useEffect","current","children","type","fileName","_jsxFileName","lineNumber","columnNumber","_c2","UsersDetails","users","_s2","COLUMNS","Header","accessor","Cell","row","getToggleRowSelectedProps","disabled","original","columns","data","getTableProps","getTableBodyProps","headerGroups","prepareRow","selectedRowIds","selectedFlatRows","hooks","visibleColumns","push","id","toggleRowSelected","isAllPageRowsSelected","page","modifiedOnChange","event","forEach","currentTarget","checked","selectableRowsInCurrentPage","selectedRowsInCurrentPage","isSelected","onChange","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","getRowProps","cells","cell","getCellProps","JSON","stringify","d","_c3","$RefreshReg$"],"sources":["C:/Users/unili/Desktop/Task 4/frontend/src/components/UsersDetails.js"],"sourcesContent":["import React, { useMemo } from \"react\";\r\nimport { useRowSelect, useTable } from \"react-table\";\r\n\r\nconst IndeterminateCheckbox = React.forwardRef(({ indeterminate, ...rest }, ref) => {\r\n  const defaultRef = React.useRef();\r\n  const resolvedRef = ref || defaultRef;\r\n\r\n  React.useEffect(() => {\r\n    resolvedRef.current.indeterminate = indeterminate;\r\n  }, [resolvedRef, indeterminate]);\r\n\r\n  return (\r\n    <>\r\n      <input type=\"checkbox\" ref={resolvedRef} {...rest} />\r\n    </>\r\n  );\r\n});\r\n\r\nconst UsersDetails = ({ users }) => {\r\n  const COLUMNS = [\r\n    {\r\n      Header: \"Check\",\r\n      accessor: \"check\",\r\n      Cell: ({ row }) => (\r\n        <div>\r\n          <IndeterminateCheckbox\r\n            {...row.getToggleRowSelectedProps()}\r\n            disabled={row.original.disabled}\r\n          />\r\n        </div>\r\n      ),\r\n    },\r\n    {\r\n      Header: \"Name\",\r\n      accessor: \"fullname\",\r\n    },\r\n    {\r\n      Header: \"Position\",\r\n      accessor: \"position\",\r\n    },\r\n    {\r\n      Header: \"e-Mail\",\r\n      accessor: \"email\",\r\n    },\r\n    {\r\n      Header: \"Last login\",\r\n      accessor: \"lastlogin\",\r\n    },\r\n    {\r\n      Header: \"Status\",\r\n      accessor: \"status\",\r\n    },\r\n  ];\r\n\r\n  const columns = useMemo(() => COLUMNS, []);\r\n  const data = useMemo(() => users, []);\r\n\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    prepareRow,\r\n    selectedRowIds,\r\n    selectedFlatRows,\r\n  } = useTable(\r\n    {\r\n      columns,\r\n      data,\r\n    },\r\n    useRowSelect,\r\n    (hooks) => {\r\n      hooks.visibleColumns.push((columns) => [\r\n        {\r\n          id: \"anyThing\",\r\n          Header: ({ toggleRowSelected, isAllPageRowsSelected, page }) => {\r\n            const modifiedOnChange = (event) => {\r\n              page.forEach((row) => {\r\n                !row.original.disabled &&\r\n                  toggleRowSelected(row.id, event.currentTarget.checked);\r\n              });\r\n            };\r\n\r\n            let selectableRowsInCurrentPage = 0;\r\n            let selectedRowsInCurrentPage = 0;\r\n            page.forEach((row) => {\r\n              row.isSelected && selectedRowsInCurrentPage++;\r\n              !row.original.disabled && selectableRowsInCurrentPage++;\r\n            });\r\n\r\n            const disabled = selectableRowsInCurrentPage === 0;\r\n            const checked =\r\n              (isAllPageRowsSelected ||\r\n                selectableRowsInCurrentPage === selectedRowsInCurrentPage) &&\r\n              !disabled;\r\n\r\n            return (\r\n              <div>\r\n                <IndeterminateCheckbox\r\n                  onChange={modifiedOnChange}\r\n                  checked={checked}\r\n                  disabled={disabled}\r\n                />\r\n              </div>\r\n            );\r\n          },\r\n          Cell: ({ row }) => (\r\n            <div>\r\n              <IndeterminateCheckbox\r\n                {...row.getToggleRowSelectedProps()}\r\n                disabled={row.original.disabled}\r\n              />\r\n            </div>\r\n          ),\r\n        },\r\n        ...columns,\r\n      ]);\r\n    }\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <table {...getTableProps()}>\r\n        <thead>\r\n          {headerGroups.map((headerGroup) => (\r\n            <tr {...headerGroup.getHeaderGroupProps()}>\r\n              {headerGroup.headers.map((column) => (\r\n                <th {...column.getHeaderProps()}>{column.render(\"Header\")}</th>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </thead>\r\n        <tbody {...getTableBodyProps()}>\r\n          {selectedFlatRows.map((row) => {\r\n            prepareRow(row);\r\n            return (\r\n              <tr {...row.getRowProps()}>\r\n                {row.cells.map((cell) => (\r\n                  <td {...cell.getCellProps()}>{cell.render(\"Cell\")}</td>\r\n                ))}\r\n              </tr>\r\n            );\r\n          })}\r\n        </tbody>\r\n      </table>\r\n      <pre>\r\n        <code>\r\n          {JSON.stringify(\r\n            {\r\n              selectedRowIds: selectedRowIds,\r\n              \"selectedFlatRows[].original\": selectedFlatRows.map((d) => d.original),\r\n            },\r\n            null,\r\n            2\r\n          )}\r\n        </code>\r\n      </pre>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default UsersDetails;\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}